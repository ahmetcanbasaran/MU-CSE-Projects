package project142;

import java.applet.Applet;
import java.applet.AudioClip;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JApplet;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.Timer;

/**
 * @author Oğuzhan BÖLÜKBAŞ - 150114022 - Marmara University C.S.E.
 */
public class NewJFrame extends javax.swing.JFrame{
    
    public String playerName;
    
    int movedDistance = 0;
    int jumpCount = 0;
    int score = 0;
    int frogPicNumber = 1;
    
    public NewJFrame() {
        
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setLayout(null);

        jButton1.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jButton1.setText("Play");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setName(""); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(460, 40, 163, 43);

        jButton2.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jButton2.setText("How to Play");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(600, 100, 163, 43);

        jButton3.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jButton3.setText("Scores");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(740, 160, 163, 43);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project142/imagepackage/background.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        jLabel2.setAlignmentY(0.0F);
        jPanel1.add(jLabel2);
        jLabel2.setBounds(0, 0, 1024, 576);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        JTextArea textArea = new JTextArea();

        textArea.setFont(new java.awt.Font("Comic Sans MS", 0, 18));

        String text = "Press the space key and jump to next water lily or rock";
       
        textArea.setColumns(20);
        textArea.setRows(2);
        textArea.setOpaque(false);
        textArea.setEditable(false);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        ImageIcon icon;

        icon = new ImageIcon(getClass().getResource("/project142/imagepackage/howTo.jpg"));

        textArea.setText(text);

        JOptionPane.showMessageDialog(null, textArea, "How To Play Screen", JOptionPane.INFORMATION_MESSAGE, icon);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
  
        this.dispose();
        this.gameOpener();
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        JTextArea txt = new JTextArea();

        txt.setFont(new java.awt.Font("Comic Sans MS", 0, 18));

        File file = new File("scores.txt");

        if (!file.exists()) {

            txt.setText("There is no recorded points");
            
        } else {

            try {
                
                txt.setText(reader(file, 6));
                
            } catch (IOException ex) {
                
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                
            }
            
        }

        txt.setColumns(30);
        txt.setRows(5);
        txt.setOpaque(false);
        txt.setEditable(false);
        txt.setLineWrap(true);
        txt.setWrapStyleWord(true);

        ImageIcon icon;

        icon = new ImageIcon(getClass().getResource("/project142/imagepackage/scores.png"));

        JOptionPane.showMessageDialog(null, txt, "Last Scores", JOptionPane.INFORMATION_MESSAGE, icon);
        
    }//GEN-LAST:event_jButton3ActionPerformed
   
    public String reader(File file, int lines) throws IOException {

        java.io.RandomAccessFile fileHandler = null;

        try {

            fileHandler = new java.io.RandomAccessFile(file, "r");

            long fileLength = file.length() - 1;
            
            StringBuilder sb = new StringBuilder();
            
            int line = 0;

            for (long filePointer = fileLength; filePointer != -1; filePointer--) {
                
                fileHandler.seek(filePointer);
                
                int readByte = fileHandler.readByte();

                if (readByte == 0xA) {
                    
                    if (line == lines) {
                        
                        if (filePointer == fileLength) {
                            
                            continue;
                            
                        } else {
                            
                            break;
                            
                        }
                        
                    }
                    
                } else if (readByte == 0xD) {
                    
                    line = line + 1;
                    
                    if (line == lines) {
                        
                        if (filePointer == fileLength - 1) {
                            
                            continue;
                            
                        } else {
                            
                            break;
                            
                        }
                        
                    }
                    
                }
                
                sb.append((char) readByte);
                
            }

            sb.deleteCharAt(sb.length() - 1);
            
            String lastLine = sb.reverse().toString();
            
            return lastLine;
            
        } catch (java.io.FileNotFoundException e) {
            
            e.printStackTrace();
            
            return null;
            
        } catch (java.io.IOException e) {
            
            e.printStackTrace();
            
            return null;
            
        } finally {
            
            fileHandler.close();
            
        }
        
    }
    
    public class Scores {

            BufferedWriter writer;

            public Scores(String s) {

                try {

                    writer = new BufferedWriter(new FileWriter("scores.txt", true));

                    writer.write(s);

                    writer.newLine();

                    writer.close();

                } catch (IOException e) {

                    System.out.println("There was a problem:" + e);

                }
            }
            
        }
    
    public void gameOpener(){
        
        playerName = JOptionPane.showInputDialog("Please enter a player name: " , "Oğuzhan BÖLÜKBAŞ");
        
        JPanel panel = new Items();
        
        JFrame frame = new JFrame();
        
        JLabel label = new JLabel();
        
        frame.setUndecorated(true);
        
        label.setBounds(0, 0, 1024, 576);
        label.setIcon(new javax.swing.ImageIcon(getClass()
                  .getResource("/project142/imagepackage/playBackground.png")));
        
        panel.setOpaque(false);
        panel.setBounds(0, 0, 1024, 576);
        
        frame.setLayout(null);
        frame.setSize(1024, 576);
        frame.setResizable(false);
        frame.setVisible(true);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(3);
        
        frame.add(panel);
        
        frame.addKeyListener((KeyListener) panel);
        
        frame.add(label);
        
        final Sound song = new Sound();
        
        frame.addWindowListener(new WindowAdapter() {
            
            public void windowActivated(WindowEvent we) {

                song.audio.loop();

            }

        });
        
    }
    
    public void gameClose(){
        
       NewJFrame.getFrames()[1].dispose();
       
       score = movedDistance - (jumpCount * 13) - 316;
       
       if (score < 0){
           
           score = 0;
           
       }
       
       JTextArea textArea = new JTextArea();

       textArea.setFont(new java.awt.Font("Comic Sans MS", 0, 18));

       String text = "You could not save the frog!\nYour score is: " + score;
       
       String result = playerName + " has " + score + " points";
       
       Scores file = new Scores(result);
      
       textArea.setColumns(20);
       textArea.setRows(2);
       textArea.setOpaque(false);
       textArea.setEditable(false);
       textArea.setLineWrap(true);
       textArea.setWrapStyleWord(true);
       
       ImageIcon icon;
       
       icon = new ImageIcon(getClass().getResource("/project142/imagepackage/endOfGameGif.gif"));

       textArea.setText(text);

       JOptionPane.showMessageDialog(null, textArea, "End of the Game", JOptionPane.INFORMATION_MESSAGE, icon);
        
       System.exit(0);
       
    }

    static class Sound extends JApplet {

        public AudioClip audio;

        public Sound() {

            try {
            
                audio = Applet.newAudioClip(getClass().getResource("/project142/soundpackage/mix.wav"));

            } catch (NullPointerException e){
                
                System.out.println("Broken voice file!");
                
            } 
            
        }
    }
    
    public class Items extends JPanel implements ActionListener, KeyListener{
        
        ActionListener aL = new ActionListener() {
            
            @Override
            public void actionPerformed(ActionEvent e) {
                
                jump();
                
                repaint();
                
            }
        };
        
        Rock firstRock = new Rock(25, 355);
        Rock rock1 = new Rock(725, 355);
        Rock rock2 = new Rock(1425, 355);
       
        Frog frog = new Frog();
        
        Lily lily1 = new Lily();
        Lily lily2 = new Lily(1511, 425);
        Lily lily3 = new Lily(1834, 425);
        Lily lily4 = new Lily(2169, 425);
        
        boolean onFirstRock = true;
        boolean onLily = false;
        boolean onRock = false;
        boolean jumped = false;
      
        Timer timer1 = new Timer(36, this);
        Timer timer2 = new Timer(31, aL);
        
        int gameTime = 0;
        
        int gravity = 1;
        
        int fallingSpeed = -15;
        
        int pCount = 0;
        
        public Items (){
            
            super();
            
            timer1.start();

        }
        
        public void jump(){
            
            onFirstRock = false;
            
            frog.frogY += fallingSpeed;
            fallingSpeed += gravity;
            frog.frogX += 7;
            movedDistance += 7;
            
            if(onRock || onLily){
                
                timer2.stop();
                fallingSpeed = -15;
                gravity = 1;
                
            }
            
            if (fallingSpeed == -15 ){
                
                frogPicNumber = 1;
                
            }
            
            else if (fallingSpeed == -14 || fallingSpeed == -13 || (fallingSpeed > 7 && fallingSpeed < 14)){
                
                frogPicNumber = 2;
                
                
            } else if (fallingSpeed > -12 && fallingSpeed < 8){
                
                frogPicNumber = 3;
                
            }
            
        }
        
        @Override
        protected void paintComponent (Graphics g){
            
            super.paintComponent(g);
            
            Graphics2D g2d = (Graphics2D) g.create();

            g2d.setColor(Color.BLUE);
            
            if(firstRock.rockX > -146){
                
                firstRock.drawRock(g, this);
                
            }
            
            rock1.drawRock(g, this);
            rock2.drawRock(g, this);

            lily1.drawLily(g, this);            
            lily2.drawLily(g, this);
            lily3.drawLily(g, this);
            lily4.drawLily(g, this);
            
            frog.drawFrog(g, this, frogPicNumber);
            
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            
            lily1.lilyX -= 5;
            lily2.lilyX -= 5;
            lily3.lilyX -= 5;
            lily4.lilyX -= 5;
            
            if ((frog.frogX + 24) > (lily1.lilyX + 6) && (frog.frogX + 24) < (lily1.lilyX + 142) &&
                    (frog.frogY + fallingSpeed) > (lily1.lilyY) && (frog.frogY+fallingSpeed) < (lily1.lilyY + 50) ||
                        (frog.frogX + 24) > (lily2.lilyX + 6) && (frog.frogX + 24) < (lily2.lilyX + 142) &&
                            (frog.frogY+fallingSpeed) > (lily2.lilyY) && (frog.frogY+fallingSpeed) < (lily2.lilyY + 50) ||
                                (frog.frogX + 24) > (lily3.lilyX + 6) && (frog.frogX + 24) < (lily3.lilyX + 142) &&
                            (frog.frogY+fallingSpeed) > (lily3.lilyY) && (frog.frogY+fallingSpeed) < (lily3.lilyY + 50) ||
                        (frog.frogX + 24) > (lily4.lilyX + 6) && (frog.frogX + 24) < (lily4.lilyX + 142) &&
                    (frog.frogY+fallingSpeed) > (lily4.lilyY) && (frog.frogY+fallingSpeed) < (lily4.lilyY + 50) &&
                fallingSpeed > 0){
                
                    onLily = true;
                    onRock = false;

                    frog.frogY = lily1.lilyY -  30;
                    frog.frogX -= 5; 
                
            }
            
            if((frog.frogX + 24) > (rock1.rockX + 35) && (frog.frogX + 24) < (rock1.rockX + 108) &&
                    (frog.frogY+fallingSpeed) > (rock1.rockY) && (frog.frogY+fallingSpeed) < (rock1.rockY + 40) ||
                        (frog.frogX + 24) > (rock2.rockX + 35) && (frog.frogX + 24) < (rock2.rockX + 108) &&
                    (frog.frogY+fallingSpeed) > (rock2.rockY) && (frog.frogY+fallingSpeed) < (rock2.rockY + 40) &&
                fallingSpeed > 0){
                 
                    onRock = true;
                    onLily = false;

                    frog.frogY = rock1.rockY -  25;
                    frog.frogX -= 5; 
                 
             }
            
            if(onLily){
                
                frog.frogX -= 5;
                movedDistance -= 5;
                
            }
            
            if(onRock && frog.frogX > 100){
                
                frog.frogX -= 45;
                
                lily1.lilyX -= 45;
                lily2.lilyX -= 45;
                lily3.lilyX -= 45;
                lily4.lilyX -= 45;
                
                rock1.rockX -= 45;
                rock2.rockX -= 45;
                firstRock.rockX -= 45;                
                
            }
                        
            if (lily1.lilyX < -145){
                 
                lily1.lilyX = 1169;
                
            }
            
            if (lily2.lilyX < -145){
                
                lily2.lilyX = 1169;
                
            }
            
            if (lily3.lilyX < -145){
                
                lily3.lilyX = 1169;
                
            }
            
            if (lily4.lilyX < -145){
                
                lily4.lilyX = 1169;
                
            }
            
            if (rock1.rockX < -146){
                
                rock1.rockX = 1425;
                
            }
            
            if (rock2.rockX < -146){
                
                rock2.rockX = 1425;
                
            }
            
            if(frog.frogY > 700 || frog.frogX > 1024 || frog.frogX < -52){
                
                gameClose();
                
            }
            
            repaint();

        }
        
        @Override
        public void keyTyped(KeyEvent e) { 
        }

        @Override
        public void keyPressed(KeyEvent e) {
            
            switch(e.getKeyCode()){
                
                case (KeyEvent.VK_SPACE):
            
                    if(pCount % 2 == 0){
                    
                        onLily = false;
                        onRock = false;

                        jumpCount++;

                        timer2.start();

                        break;
                        
                    }
                    
                case (KeyEvent.VK_P):
                    
                    pCount++;
                    
                    if(pCount % 2 == 0){
                        
                        timer1.start();
                        
                        if (onLily != true && onRock != true && onFirstRock != true){
                            
                            timer2.start();
                            
                        }
                        
                    } else {
                        
                        timer1.stop();
                        timer2.stop();
                        
                    }
                    
            }    
            
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
        
    }
    
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                JFrame mainFrame = new NewJFrame();
                
                mainFrame.setSize(1024, 576);
                mainFrame.setLocationRelativeTo(null);
                mainFrame.setDefaultCloseOperation(EXIT_ON_CLOSE);
                mainFrame.setVisible(true);
                
            }
            
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

}
